
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

// Your network credentials
const char* ssid = "Your_SSID";  // Replace with your network SSID
const char* password = "Your_PASSWORD";  // Replace with your network password

// Create an AsyncWebServer object on port 80
AsyncWebServer server(80);

// Define GPIO Pins
const int solenoidPin = 5;     // Solenoid valve control pin (GPIO5)
const int buzzerPin = 12;      // Buzzer pin (GPIO12)
const int phDOPin = 14;        // pH sensor digital output pin (GPIO14)
const int phPOPin = 27;        // pH sensor analog output pin (GPIO27)
const int tdsPin = 26;         // TDS sensor analog pin (GPIO26)
const int waterLevelPin = 4;   // Simulating water level sensor on GPIO4

// Variables to store sensor data
float waterLevel = 0;          // Water level in percentage
int waterQualityTDS = 0;       // Water quality from TDS sensor
int phDigitalValue = 0;        // pH sensor digital output
int phAnalogValue = 0;         // pH sensor analog output

// Function to control the solenoid valve based on water level
void controlSolenoidValve() {
  if (waterLevel < 30) {  // If water level is low (less than 30%)
    digitalWrite(solenoidPin, HIGH);  // Open the solenoid valve
    Serial.println("Water level low. Solenoid valve opened.");
  } else if (waterLevel > 80) {  // If water level is high (more than 80%)
    digitalWrite(solenoidPin, LOW);  // Close the solenoid valve
    Serial.println("Water level high. Solenoid valve closed.");
  }
}

// Function to control the buzzer based on water quality (pH level)
void controlBuzzer() {
  if (phAnalogValue < 1000) {  // Simulating bad pH level
    digitalWrite(buzzerPin, HIGH);  // Turn on the buzzer
    Serial.println("pH level bad. Buzzer activated.");
  } else {
    digitalWrite(buzzerPin, LOW);   // Turn off the buzzer
  }
}

void setup() {
  // Start serial monitor for debugging
  Serial.begin(115200);

  // Initialize GPIO pins
  pinMode(solenoidPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(phDOPin, INPUT);
  pinMode(phPOPin, INPUT);
  pinMode(tdsPin, INPUT);
  pinMode(waterLevelPin, INPUT);  // Simulating water level sensor

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Route for the root (main) page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    String html = R"rawliteral(
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Water Monitoring System</title>
          <style>
              .container {
                  font-family: Arial, sans-serif;
                  margin: 20px;
              }
              .header img {
                  width: 150px;
              }
              .content {
                  display: flex;
                  justify-content: space-between;
              }
              .water-tank, .quality-gauge {
                  width: 100px;
                  height: 200px;
                  border: 2px solid black;
                  position: relative;
                  margin-bottom: 20px;
              }
              .water-level {
                  background-color: blue;
                  position: absolute;
                  bottom: 0;
                  width: 100%;
                  color: white;
                  text-align: center;
              }
              .quality-labels span {
                  margin-right: 10px;
              }
              .solenoid-control button {
                  padding: 10px 20px;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header"><img src="logo.png" alt="Logo"></div>
              <div class="content">
                  <div class="left-section">
                      <div class="water-tank-container">
                          <div class="water-tank">
                              <div class="water-level" style="height: " + String(waterLevel) + "%;"></div>
                          </div>
                          <div class="water-tank-label">Water Level</div>
                      </div>
                      <div class="water-quality-container">
                          <div class="quality-gauge">
                              <div class="pointer"></div>
                          </div>
                          <div class="quality-labels">
                              <span style="color: red;">Bad</span>
                              <span style="color: yellow;">Warning</span>
                              <span style="color: green;">Good</span>
                          </div>
                          <div class="water-quality-label">Water Quality</div>
                      </div>
                  </div>
                  <div class="right-section">
                      <div class="solenoid-control">
                          <button>Open/Close</button>
                      </div>
                      <div class="live-gif-container">
                          <img src="live.gif" alt="Live">
                      </div>
                      <div class="notification-panel">
                          <p>Notifications will appear here...</p>
                      </div>
                  </div>
              </div>
              <div class="documentation">
                  <a href="documentation.pdf" target="_blank">View Documentation</a>
              </div>
          </div>
      </body>
      </html>
    )rawliteral";
    request->send(200, "text/html", html);
  });

  // Start server
  server.begin();
}

void loop() {
  // Simulate or read water level (e.g., from an ultrasonic sensor)
  waterLevel = analogRead(waterLevelPin);  // Simulating water level reading

  // Read TDS sensor (analog value for water quality)
  waterQualityTDS = analogRead(tdsPin);  // Reading water quality from TDS sensor
  Serial.printf("Water Quality (TDS): ");
  Serial.println(waterQualityTDS);

  // Read pH sensor digital and analog values
  phDigitalValue = digitalRead(phDOPin);
  phAnalogValue = analogRead(phPOPin);
  Serial.printf("pH Digital Output (DO): ");
  Serial.println(phDigitalValue);
  Serial.printf("pH Analog Output (PO): ");
  Serial.println(phAnalogValue);

  // Control solenoid valve based on water level
  controlSolenoidValve();

  // Control buzzer based on water quality
  controlBuzzer();

  delay(2000);  // Delay for simulation purposes
}
